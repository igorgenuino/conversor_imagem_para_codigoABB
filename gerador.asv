clear all, clc, close all
%% Programa para gerar um arquivo txt somente com comando de linhas de deslocamento a partir de um txt vindo de um svg
% a entrada deste programa dever ser um arquivo txt onde os simbolos de curva, linha e movimento estejam identificados de acordo com o
% padrao a seguir **ESPACO*C*ESPACO**, ou seja ** C **
% Portanto é necessario fazer uma modificacão rapida no word ou onde quer que for para e substituir neste padrão. Alem disso, colocar letra maiuscula


%% começo

N_int = 10;

svg_vector = []; % resultado final - SVG vector Conterá os pontos que queremos
text = fileread('tester2d2.txt'); % importa texto svg limpo do jeito que precisamos

% acha as posições das letras do arquivo svg, o comando strfind encontra as
% posições das letras ao longo do texto
CC = strfind(text, ' C ');
MM = strfind(text, ' M ');
LL = strfind(text, ' L ');

% organiza as letras na ordem, o comando sort ordena em ordem crescente 
%os elementos dentro do veto desejado

sort_vec = sort([CC MM LL]); 

% define o tamanho do vetor N que iremos utilizar 
N = length(sort_vec);

%o for vai definir oque acontecera com cada letra letra C M ou L
for i = 1:N
    
    
    if i == N
        Lvecs = text( sort_vec(i):end);
    else
        % Começamos a montar o texto. Em um codigo SVG nunca o primeiro
        % é sempre M, então podemos começar aqui. Por exemplo: o
        % sort_vec(1) é 4. 4 é a posição da primeira letra do nosso arquivo
        % de texto. O Lvecs é formado pelo texto entre a posição a primeira
        % letra que esta na posição sort_vec(1) e a segunda letra que esta na
        % posição sort_vec(2). Assim, Lvecs é M 0.00 0.00. M é o
        % sort_vec(1) seguido pelo text ate o proximo sort_vec.
        Lvecs = text( sort_vec(i):sort_vec(i+1));
    end
    
    % Letra L e M nao são problemas. O C não é possivel de ser interpretado
    % pelo codigo o robo ABB como uma coordenada de forma direta. O vetor
    % findC é montado pelas posições do C que temos que modificar
    findC = strfind(Lvecs,'C');
    
    % Cases
    if findC ~= 0
        % Sabemos pelo SVG que o é uma curva de bezier, entao vamos
        % trabalhar nisso. Pegamos os valores que tem apos a letra C que
        % sao as coordenadas de bezier. Transformamos em numeros.
        coord = str2num(Lvecs(1,findC+1:end));
        
        % Aqui colocamos os ultimos pontos antes do C como referencia de
        % inicio. Por exemplo, no primeiro C, o passo anterior foi mover
        % para M 483.0200 23.0100
        add2coord = text(sort_vec(i-1)+ 3:sort_vec(i));
        add2coord = str2num(add2coord);
        add2coord = [add2coord(end-1) add2coord(end)];
        
        % O NV é composto pelas coordenadas iniciais e pelas coordenadas do
        % SVG de bezier
        NV = [add2coord coord];
        
        % Chama a função bezier. NV(1) e NV(2) são os pontos iniciais.
        % N_int é o numero de "retas" que se deseja transformar a curva. Px
        % e Py sao as coordenadas ponto a ponto das retas que formam a
        % curva
        [Px,Py] = bezier(NV(1),NV(2),NV(3),NV(4),NV(5),NV(6),NV(7),NV(8),N_int);
        
        % Aqui transformamos os pontos Px e Py em texto com L (codigo de
        % reta. Assim, a
        for j = 1:size(Px,2)
            Lvecs = num2str([Px(j) Py(j)]);
            
            svg_vector = [svg_vector ' L ' Lvecs ' ; ' ];
        end
        
        %msg = msgbox('ENTROU NO FINDC');
    else
        %aqui é jogado no svg_vector (que é nosso vetor final) o Lvecs.
        svg_vector = [svg_vector Lvecs ' ; '];
        
        % msg = msgbox('NAOOOO ENTROU NO FINDC');
    end
    
 end

fileID = fopen('teste1.txt','w');
fprintf(fileID, svg_vector)
fclose(fileID)
